// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -destination=mock/api.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	domain "github.com/netcracker/qubership-core-site-management/site-management-service/v2/domain"
	domain0 "github.com/netcracker/qubership-core-site-management/site-management-service/v2/paasMediationClient/domain"
	tm "github.com/netcracker/qubership-core-site-management/site-management-service/v2/tm"
	gomock "go.uber.org/mock/gomock"
)

// MockSynchronizer is a mock of Synchronizer interface.
type MockSynchronizer struct {
	ctrl     *gomock.Controller
	recorder *MockSynchronizerMockRecorder
	isgomock struct{}
}

// MockSynchronizerMockRecorder is the mock recorder for MockSynchronizer.
type MockSynchronizerMockRecorder struct {
	mock *MockSynchronizer
}

// NewMockSynchronizer creates a new mock instance.
func NewMockSynchronizer(ctrl *gomock.Controller) *MockSynchronizer {
	mock := &MockSynchronizer{ctrl: ctrl}
	mock.recorder = &MockSynchronizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSynchronizer) EXPECT() *MockSynchronizerMockRecorder {
	return m.recorder
}

// AwaitAction mocks base method.
func (m *MockSynchronizer) AwaitAction(ctx context.Context, async bool, function func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwaitAction", ctx, async, function)
	ret0, _ := ret[0].(error)
	return ret0
}

// AwaitAction indicates an expected call of AwaitAction.
func (mr *MockSynchronizerMockRecorder) AwaitAction(ctx, async, function any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwaitAction", reflect.TypeOf((*MockSynchronizer)(nil).AwaitAction), ctx, async, function)
}

// ChangeTenantStatus mocks base method.
func (m *MockSynchronizer) ChangeTenantStatus(ctx context.Context, tenantId string, active bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTenantStatus", ctx, tenantId, active)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeTenantStatus indicates an expected call of ChangeTenantStatus.
func (mr *MockSynchronizerMockRecorder) ChangeTenantStatus(ctx, tenantId, active any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTenantStatus", reflect.TypeOf((*MockSynchronizer)(nil).ChangeTenantStatus), ctx, tenantId, active)
}

// CheckCollisions mocks base method.
func (m *MockSynchronizer) CheckCollisions(ctx context.Context, data domain.TenantDns) (domain.ValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCollisions", ctx, data)
	ret0, _ := ret[0].(domain.ValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCollisions indicates an expected call of CheckCollisions.
func (mr *MockSynchronizerMockRecorder) CheckCollisions(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCollisions", reflect.TypeOf((*MockSynchronizer)(nil).CheckCollisions), ctx, data)
}

// DeleteRoutes mocks base method.
func (m *MockSynchronizer) DeleteRoutes(ctx context.Context, tenantId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutes", ctx, tenantId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoutes indicates an expected call of DeleteRoutes.
func (mr *MockSynchronizerMockRecorder) DeleteRoutes(ctx, tenantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutes", reflect.TypeOf((*MockSynchronizer)(nil).DeleteRoutes), ctx, tenantId)
}

// DeleteTenant mocks base method.
func (m *MockSynchronizer) DeleteTenant(ctx context.Context, tenantId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenant", ctx, tenantId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTenant indicates an expected call of DeleteTenant.
func (mr *MockSynchronizerMockRecorder) DeleteTenant(ctx, tenantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenant", reflect.TypeOf((*MockSynchronizer)(nil).DeleteTenant), ctx, tenantId)
}

// FindAll mocks base method.
func (m *MockSynchronizer) FindAll(ctx context.Context) (*[]domain.TenantDns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].(*[]domain.TenantDns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSynchronizerMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSynchronizer)(nil).FindAll), ctx)
}

// FindAllWithGeneral mocks base method.
func (m *MockSynchronizer) FindAllWithGeneral(ctx context.Context, mergeGeneral bool) (*[]domain.TenantDns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWithGeneral", ctx, mergeGeneral)
	ret0, _ := ret[0].(*[]domain.TenantDns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithGeneral indicates an expected call of FindAllWithGeneral.
func (mr *MockSynchronizerMockRecorder) FindAllWithGeneral(ctx, mergeGeneral any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithGeneral", reflect.TypeOf((*MockSynchronizer)(nil).FindAllWithGeneral), ctx, mergeGeneral)
}

// FindByExternalTenantId mocks base method.
func (m *MockSynchronizer) FindByExternalTenantId(ctx context.Context, externalId, tenantSite string, mergeGeneral, generateDefault bool) (*domain.TenantDns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExternalTenantId", ctx, externalId, tenantSite, mergeGeneral, generateDefault)
	ret0, _ := ret[0].(*domain.TenantDns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExternalTenantId indicates an expected call of FindByExternalTenantId.
func (mr *MockSynchronizerMockRecorder) FindByExternalTenantId(ctx, externalId, tenantSite, mergeGeneral, generateDefault any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExternalTenantId", reflect.TypeOf((*MockSynchronizer)(nil).FindByExternalTenantId), ctx, externalId, tenantSite, mergeGeneral, generateDefault)
}

// FindByTenantId mocks base method.
func (m *MockSynchronizer) FindByTenantId(ctx context.Context, tenantId, tenantSite string, mergeGeneral, generateDefault bool) (*domain.TenantDns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTenantId", ctx, tenantId, tenantSite, mergeGeneral, generateDefault)
	ret0, _ := ret[0].(*domain.TenantDns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTenantId indicates an expected call of FindByTenantId.
func (mr *MockSynchronizerMockRecorder) FindByTenantId(ctx, tenantId, tenantSite, mergeGeneral, generateDefault any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTenantId", reflect.TypeOf((*MockSynchronizer)(nil).FindByTenantId), ctx, tenantId, tenantSite, mergeGeneral, generateDefault)
}

// GetAnnotatedRoutes mocks base method.
func (m *MockSynchronizer) GetAnnotatedRoutes(ctx context.Context, data *domain.TenantData, scheme *domain.TenantDns) (*[]domain0.CustomService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotatedRoutes", ctx, data, scheme)
	ret0, _ := ret[0].(*[]domain0.CustomService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotatedRoutes indicates an expected call of GetAnnotatedRoutes.
func (mr *MockSynchronizerMockRecorder) GetAnnotatedRoutes(ctx, data, scheme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotatedRoutes", reflect.TypeOf((*MockSynchronizer)(nil).GetAnnotatedRoutes), ctx, data, scheme)
}

// GetAnnotatedRoutesBulk mocks base method.
func (m *MockSynchronizer) GetAnnotatedRoutesBulk(ctx context.Context, data *[]*domain.TenantData) (*[]*domain.TenantData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotatedRoutesBulk", ctx, data)
	ret0, _ := ret[0].(*[]*domain.TenantData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotatedRoutesBulk indicates an expected call of GetAnnotatedRoutesBulk.
func (mr *MockSynchronizerMockRecorder) GetAnnotatedRoutesBulk(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotatedRoutesBulk", reflect.TypeOf((*MockSynchronizer)(nil).GetAnnotatedRoutesBulk), ctx, data)
}

// GetAnnotatedRoutesForTenant mocks base method.
func (m *MockSynchronizer) GetAnnotatedRoutesForTenant(ctx context.Context, data *domain.TenantData) (*[]domain0.CustomService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotatedRoutesForTenant", ctx, data)
	ret0, _ := ret[0].(*[]domain0.CustomService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotatedRoutesForTenant indicates an expected call of GetAnnotatedRoutesForTenant.
func (mr *MockSynchronizerMockRecorder) GetAnnotatedRoutesForTenant(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotatedRoutesForTenant", reflect.TypeOf((*MockSynchronizer)(nil).GetAnnotatedRoutesForTenant), ctx, data)
}

// GetIdpRouteForTenant mocks base method.
func (m *MockSynchronizer) GetIdpRouteForTenant(ctx context.Context, data *domain.TenantData) ([]domain0.CustomService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdpRouteForTenant", ctx, data)
	ret0, _ := ret[0].([]domain0.CustomService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdpRouteForTenant indicates an expected call of GetIdpRouteForTenant.
func (mr *MockSynchronizerMockRecorder) GetIdpRouteForTenant(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdpRouteForTenant", reflect.TypeOf((*MockSynchronizer)(nil).GetIdpRouteForTenant), ctx, data)
}

// GetOpenShiftRoutes mocks base method.
func (m *MockSynchronizer) GetOpenShiftRoutes(ctx context.Context, params map[string][]string) (*[]domain0.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenShiftRoutes", ctx, params)
	ret0, _ := ret[0].(*[]domain0.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenShiftRoutes indicates an expected call of GetOpenShiftRoutes.
func (mr *MockSynchronizerMockRecorder) GetOpenShiftRoutes(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenShiftRoutes", reflect.TypeOf((*MockSynchronizer)(nil).GetOpenShiftRoutes), ctx, params)
}

// GetPublicServices mocks base method.
func (m *MockSynchronizer) GetPublicServices(ctx context.Context, namespaces []string) (*[]domain0.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicServices", ctx, namespaces)
	ret0, _ := ret[0].(*[]domain0.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicServices indicates an expected call of GetPublicServices.
func (mr *MockSynchronizerMockRecorder) GetPublicServices(ctx, namespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicServices", reflect.TypeOf((*MockSynchronizer)(nil).GetPublicServices), ctx, namespaces)
}

// GetRealm mocks base method.
func (m *MockSynchronizer) GetRealm(ctx context.Context, realmId string) (*domain.Realm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm", ctx, realmId)
	ret0, _ := ret[0].(*domain.Realm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm.
func (mr *MockSynchronizerMockRecorder) GetRealm(ctx, realmId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*MockSynchronizer)(nil).GetRealm), ctx, realmId)
}

// GetRealms mocks base method.
func (m *MockSynchronizer) GetRealms(ctx context.Context, showAll bool) (*domain.Realms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealms", ctx, showAll)
	ret0, _ := ret[0].(*domain.Realms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealms indicates an expected call of GetRealms.
func (mr *MockSynchronizerMockRecorder) GetRealms(ctx, showAll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealms", reflect.TypeOf((*MockSynchronizer)(nil).GetRealms), ctx, showAll)
}

// GetServiceName mocks base method.
func (m *MockSynchronizer) GetServiceName(ctx context.Context, externalId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceName", ctx, externalId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceName indicates an expected call of GetServiceName.
func (mr *MockSynchronizerMockRecorder) GetServiceName(ctx, externalId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceName", reflect.TypeOf((*MockSynchronizer)(nil).GetServiceName), ctx, externalId)
}

// GetSite mocks base method.
func (m *MockSynchronizer) GetSite(ctx context.Context, externalId, url string, mergeGeneral, generateDefault bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSite", ctx, externalId, url, mergeGeneral, generateDefault)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSite indicates an expected call of GetSite.
func (mr *MockSynchronizerMockRecorder) GetSite(ctx, externalId, url, mergeGeneral, generateDefault any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSite", reflect.TypeOf((*MockSynchronizer)(nil).GetSite), ctx, externalId, url, mergeGeneral, generateDefault)
}

// RegisterTenant mocks base method.
func (m *MockSynchronizer) RegisterTenant(ctx context.Context, tenant tm.Tenant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTenant", ctx, tenant)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTenant indicates an expected call of RegisterTenant.
func (mr *MockSynchronizerMockRecorder) RegisterTenant(ctx, tenant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTenant", reflect.TypeOf((*MockSynchronizer)(nil).RegisterTenant), ctx, tenant)
}

// SendRoutesToIDP mocks base method.
func (m *MockSynchronizer) SendRoutesToIDP(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRoutesToIDP", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRoutesToIDP indicates an expected call of SendRoutesToIDP.
func (mr *MockSynchronizerMockRecorder) SendRoutesToIDP(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRoutesToIDP", reflect.TypeOf((*MockSynchronizer)(nil).SendRoutesToIDP), ctx)
}

// Sync mocks base method.
func (m *MockSynchronizer) Sync(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sync", ctx)
}

// Sync indicates an expected call of Sync.
func (mr *MockSynchronizerMockRecorder) Sync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSynchronizer)(nil).Sync), ctx)
}

// Upsert mocks base method.
func (m *MockSynchronizer) Upsert(ctx context.Context, data domain.TenantDns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSynchronizerMockRecorder) Upsert(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSynchronizer)(nil).Upsert), ctx, data)
}
