// Code generated by MockGen. DO NOT EDIT.
// Source: synchronizer.go
//
// Generated by this command:
//
//	mockgen -source=synchronizer.go -destination=mock/synchronizer.go
//

// Package mock_synchronizer is a generated GoMock package.
package mock_synchronizer

import (
	context "context"
	reflect "reflect"
	time "time"

	paasMediationClient "github.com/netcracker/qubership-core-site-management/site-management-service/v2/paasMediationClient"
	domain "github.com/netcracker/qubership-core-site-management/site-management-service/v2/paasMediationClient/domain"
	tm "github.com/netcracker/qubership-core-site-management/site-management-service/v2/tm"
	gomock "go.uber.org/mock/gomock"
)

// MockpaasMediationClient is a mock of paasMediationClient interface.
type MockpaasMediationClient struct {
	ctrl     *gomock.Controller
	recorder *MockpaasMediationClientMockRecorder
	isgomock struct{}
}

// MockpaasMediationClientMockRecorder is the mock recorder for MockpaasMediationClient.
type MockpaasMediationClientMockRecorder struct {
	mock *MockpaasMediationClient
}

// NewMockpaasMediationClient creates a new mock instance.
func NewMockpaasMediationClient(ctrl *gomock.Controller) *MockpaasMediationClient {
	mock := &MockpaasMediationClient{ctrl: ctrl}
	mock.recorder = &MockpaasMediationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpaasMediationClient) EXPECT() *MockpaasMediationClientMockRecorder {
	return m.recorder
}

// AddRouteCallback mocks base method.
func (m *MockpaasMediationClient) AddRouteCallback(callback paasMediationClient.RoutesCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRouteCallback", callback)
}

// AddRouteCallback indicates an expected call of AddRouteCallback.
func (mr *MockpaasMediationClientMockRecorder) AddRouteCallback(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouteCallback", reflect.TypeOf((*MockpaasMediationClient)(nil).AddRouteCallback), callback)
}

// CreateRoute mocks base method.
func (m *MockpaasMediationClient) CreateRoute(ctx context.Context, route *domain.Route, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", ctx, route, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockpaasMediationClientMockRecorder) CreateRoute(ctx, route, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockpaasMediationClient)(nil).CreateRoute), ctx, route, namespace)
}

// CreateService mocks base method.
func (m *MockpaasMediationClient) CreateService(ctx context.Context, service *domain.Service, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, service, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockpaasMediationClientMockRecorder) CreateService(ctx, service, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockpaasMediationClient)(nil).CreateService), ctx, service, namespace)
}

// DeleteRoute mocks base method.
func (m *MockpaasMediationClient) DeleteRoute(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockpaasMediationClientMockRecorder) DeleteRoute(ctx, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockpaasMediationClient)(nil).DeleteRoute), ctx, namespace, name)
}

// DeleteService mocks base method.
func (m *MockpaasMediationClient) DeleteService(ctx context.Context, service, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", ctx, service, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockpaasMediationClientMockRecorder) DeleteService(ctx, service, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockpaasMediationClient)(nil).DeleteService), ctx, service, namespace)
}

// GetConfigMaps2 mocks base method.
func (m *MockpaasMediationClient) GetConfigMaps2(ctx context.Context, namespace string, filter func(*domain.Configmap) bool) (*[]domain.Configmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMaps2", ctx, namespace, filter)
	ret0, _ := ret[0].(*[]domain.Configmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMaps2 indicates an expected call of GetConfigMaps2.
func (mr *MockpaasMediationClientMockRecorder) GetConfigMaps2(ctx, namespace, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMaps2", reflect.TypeOf((*MockpaasMediationClient)(nil).GetConfigMaps2), ctx, namespace, filter)
}

// GetLastCacheUpdateTime mocks base method.
func (m *MockpaasMediationClient) GetLastCacheUpdateTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCacheUpdateTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastCacheUpdateTime indicates an expected call of GetLastCacheUpdateTime.
func (mr *MockpaasMediationClientMockRecorder) GetLastCacheUpdateTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCacheUpdateTime", reflect.TypeOf((*MockpaasMediationClient)(nil).GetLastCacheUpdateTime))
}

// GetNamespace mocks base method.
func (m *MockpaasMediationClient) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockpaasMediationClientMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockpaasMediationClient)(nil).GetNamespace))
}

// GetRoutes mocks base method.
func (m *MockpaasMediationClient) GetRoutes(ctx context.Context, namespace string) (*[]domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutes", ctx, namespace)
	ret0, _ := ret[0].(*[]domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutes indicates an expected call of GetRoutes.
func (mr *MockpaasMediationClientMockRecorder) GetRoutes(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutes", reflect.TypeOf((*MockpaasMediationClient)(nil).GetRoutes), ctx, namespace)
}

// GetRoutesByFilter mocks base method.
func (m *MockpaasMediationClient) GetRoutesByFilter(ctx context.Context, namespace string, filter func(*domain.Route) bool) (*[]domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutesByFilter", ctx, namespace, filter)
	ret0, _ := ret[0].(*[]domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutesByFilter indicates an expected call of GetRoutesByFilter.
func (mr *MockpaasMediationClientMockRecorder) GetRoutesByFilter(ctx, namespace, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutesByFilter", reflect.TypeOf((*MockpaasMediationClient)(nil).GetRoutesByFilter), ctx, namespace, filter)
}

// GetRoutesForNamespaces mocks base method.
func (m *MockpaasMediationClient) GetRoutesForNamespaces(ctx context.Context, namespaces []string) (*[]domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutesForNamespaces", ctx, namespaces)
	ret0, _ := ret[0].(*[]domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutesForNamespaces indicates an expected call of GetRoutesForNamespaces.
func (mr *MockpaasMediationClientMockRecorder) GetRoutesForNamespaces(ctx, namespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutesForNamespaces", reflect.TypeOf((*MockpaasMediationClient)(nil).GetRoutesForNamespaces), ctx, namespaces)
}

// GetRoutesForNamespaces2 mocks base method.
func (m *MockpaasMediationClient) GetRoutesForNamespaces2(ctx context.Context, namespaces []string, filter func(*domain.Route) bool) (*[]domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutesForNamespaces2", ctx, namespaces, filter)
	ret0, _ := ret[0].(*[]domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutesForNamespaces2 indicates an expected call of GetRoutesForNamespaces2.
func (mr *MockpaasMediationClientMockRecorder) GetRoutesForNamespaces2(ctx, namespaces, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutesForNamespaces2", reflect.TypeOf((*MockpaasMediationClient)(nil).GetRoutesForNamespaces2), ctx, namespaces, filter)
}

// GetServices2 mocks base method.
func (m *MockpaasMediationClient) GetServices2(ctx context.Context, namespace string, filter func(*domain.Service) bool) (*[]domain.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices2", ctx, namespace, filter)
	ret0, _ := ret[0].(*[]domain.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices2 indicates an expected call of GetServices2.
func (mr *MockpaasMediationClientMockRecorder) GetServices2(ctx, namespace, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices2", reflect.TypeOf((*MockpaasMediationClient)(nil).GetServices2), ctx, namespace, filter)
}

// GetServicesForNamespaces2 mocks base method.
func (m *MockpaasMediationClient) GetServicesForNamespaces2(ctx context.Context, namespaces []string, filter func(*domain.Service) bool) (*[]domain.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesForNamespaces2", ctx, namespaces, filter)
	ret0, _ := ret[0].(*[]domain.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesForNamespaces2 indicates an expected call of GetServicesForNamespaces2.
func (mr *MockpaasMediationClientMockRecorder) GetServicesForNamespaces2(ctx, namespaces, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesForNamespaces2", reflect.TypeOf((*MockpaasMediationClient)(nil).GetServicesForNamespaces2), ctx, namespaces, filter)
}

// InitServicesMapInCache mocks base method.
func (m *MockpaasMediationClient) InitServicesMapInCache(ctx context.Context, namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitServicesMapInCache", ctx, namespace)
}

// InitServicesMapInCache indicates an expected call of InitServicesMapInCache.
func (mr *MockpaasMediationClientMockRecorder) InitServicesMapInCache(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitServicesMapInCache", reflect.TypeOf((*MockpaasMediationClient)(nil).InitServicesMapInCache), ctx, namespace)
}

// StartSyncingCache mocks base method.
func (m *MockpaasMediationClient) StartSyncingCache(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartSyncingCache", ctx)
}

// StartSyncingCache indicates an expected call of StartSyncingCache.
func (mr *MockpaasMediationClientMockRecorder) StartSyncingCache(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSyncingCache", reflect.TypeOf((*MockpaasMediationClient)(nil).StartSyncingCache), ctx)
}

// UpdateOrCreateRoute mocks base method.
func (m *MockpaasMediationClient) UpdateOrCreateRoute(ctx context.Context, route *domain.Route, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateRoute", ctx, route, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreateRoute indicates an expected call of UpdateOrCreateRoute.
func (mr *MockpaasMediationClientMockRecorder) UpdateOrCreateRoute(ctx, route, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateRoute", reflect.TypeOf((*MockpaasMediationClient)(nil).UpdateOrCreateRoute), ctx, route, namespace)
}

// UpdateOrCreateService mocks base method.
func (m *MockpaasMediationClient) UpdateOrCreateService(ctx context.Context, service *domain.Service, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateService", ctx, service, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreateService indicates an expected call of UpdateOrCreateService.
func (mr *MockpaasMediationClientMockRecorder) UpdateOrCreateService(ctx, service, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateService", reflect.TypeOf((*MockpaasMediationClient)(nil).UpdateOrCreateService), ctx, service, namespace)
}

// MocktmClient is a mock of tmClient interface.
type MocktmClient struct {
	ctrl     *gomock.Controller
	recorder *MocktmClientMockRecorder
	isgomock struct{}
}

// MocktmClientMockRecorder is the mock recorder for MocktmClient.
type MocktmClientMockRecorder struct {
	mock *MocktmClient
}

// NewMocktmClient creates a new mock instance.
func NewMocktmClient(ctrl *gomock.Controller) *MocktmClient {
	mock := &MocktmClient{ctrl: ctrl}
	mock.recorder = &MocktmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktmClient) EXPECT() *MocktmClientMockRecorder {
	return m.recorder
}

// DeleteFromActiveTenantsCache mocks base method.
func (m *MocktmClient) DeleteFromActiveTenantsCache(ctx context.Context, tenants []tm.Tenant) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFromActiveTenantsCache", ctx, tenants)
}

// DeleteFromActiveTenantsCache indicates an expected call of DeleteFromActiveTenantsCache.
func (mr *MocktmClientMockRecorder) DeleteFromActiveTenantsCache(ctx, tenants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromActiveTenantsCache", reflect.TypeOf((*MocktmClient)(nil).DeleteFromActiveTenantsCache), ctx, tenants)
}

// GetActiveTenantsCache mocks base method.
func (m *MocktmClient) GetActiveTenantsCache(ctx context.Context) []tm.Tenant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTenantsCache", ctx)
	ret0, _ := ret[0].([]tm.Tenant)
	return ret0
}

// GetActiveTenantsCache indicates an expected call of GetActiveTenantsCache.
func (mr *MocktmClientMockRecorder) GetActiveTenantsCache(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTenantsCache", reflect.TypeOf((*MocktmClient)(nil).GetActiveTenantsCache), ctx)
}

// GetAllTenantsByStatus mocks base method.
func (m *MocktmClient) GetAllTenantsByStatus(ctx context.Context, status string) (*[]tm.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTenantsByStatus", ctx, status)
	ret0, _ := ret[0].(*[]tm.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTenantsByStatus indicates an expected call of GetAllTenantsByStatus.
func (mr *MocktmClientMockRecorder) GetAllTenantsByStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTenantsByStatus", reflect.TypeOf((*MocktmClient)(nil).GetAllTenantsByStatus), ctx, status)
}

// GetTenantByExternalId mocks base method.
func (m *MocktmClient) GetTenantByExternalId(ctx context.Context, externalId string) (*tm.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantByExternalId", ctx, externalId)
	ret0, _ := ret[0].(*tm.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantByExternalId indicates an expected call of GetTenantByExternalId.
func (mr *MocktmClientMockRecorder) GetTenantByExternalId(ctx, externalId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantByExternalId", reflect.TypeOf((*MocktmClient)(nil).GetTenantByExternalId), ctx, externalId)
}

// GetTenantByObjectId mocks base method.
func (m *MocktmClient) GetTenantByObjectId(ctx context.Context, objectId string) (*tm.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantByObjectId", ctx, objectId)
	ret0, _ := ret[0].(*tm.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantByObjectId indicates an expected call of GetTenantByObjectId.
func (mr *MocktmClientMockRecorder) GetTenantByObjectId(ctx, objectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantByObjectId", reflect.TypeOf((*MocktmClient)(nil).GetTenantByObjectId), ctx, objectId)
}

// StartWatching mocks base method.
func (m *MocktmClient) StartWatching(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWatching", ctx)
}

// StartWatching indicates an expected call of StartWatching.
func (mr *MocktmClientMockRecorder) StartWatching(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWatching", reflect.TypeOf((*MocktmClient)(nil).StartWatching), ctx)
}

// SubscribeToAll mocks base method.
func (m *MocktmClient) SubscribeToAll(callback func(context.Context, tm.TenantWatchEvent) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeToAll", callback)
}

// SubscribeToAll indicates an expected call of SubscribeToAll.
func (mr *MocktmClientMockRecorder) SubscribeToAll(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToAll", reflect.TypeOf((*MocktmClient)(nil).SubscribeToAll), callback)
}

// SubscribeToAllExcept mocks base method.
func (m *MocktmClient) SubscribeToAllExcept(subEventType tm.TenantWatchEventType, callback func(context.Context, tm.TenantWatchEvent) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeToAllExcept", subEventType, callback)
}

// SubscribeToAllExcept indicates an expected call of SubscribeToAllExcept.
func (mr *MocktmClientMockRecorder) SubscribeToAllExcept(subEventType, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToAllExcept", reflect.TypeOf((*MocktmClient)(nil).SubscribeToAllExcept), subEventType, callback)
}

// UpdateActiveTenantsCache mocks base method.
func (m *MocktmClient) UpdateActiveTenantsCache(ctx context.Context, tenants []tm.Tenant) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateActiveTenantsCache", ctx, tenants)
}

// UpdateActiveTenantsCache indicates an expected call of UpdateActiveTenantsCache.
func (mr *MocktmClientMockRecorder) UpdateActiveTenantsCache(ctx, tenants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveTenantsCache", reflect.TypeOf((*MocktmClient)(nil).UpdateActiveTenantsCache), ctx, tenants)
}
